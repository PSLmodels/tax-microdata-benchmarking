---
output: html_document
editor_options: 
 chunk_output_type: console
---

# Read "recipes", read IRS files, and save preliminary version of target data

This chapter reads the manually created "target recipes" xlsx file and reads the IRS xls* files identifed within.

It then saves them as potential_targets_preliminary.rds, to be used for further investigation and testing to be sure they seem correct.

## Setup

```{r}
#| label: setup

# QROOT <- normalizePath(
#   file.path(getwd(), "tmd", "national_targets"),
#   winslash = "/"
# )

QROOT <- local({
  root <- tryCatch(quarto::get_running_project_root(), error = function(e) NULL) # non-NULL only during render
  if (!is.null(root)) {
    normalizePath(root, winslash = "/") # use Quartoâ€™s actual project root
  } else {
    normalizePath(file.path(getwd(), "tmd", "national_targets"), winslash = "/") # interactive default
  }
})

source(fs::path(QROOT, "setup.R"))

# note - will load the functions that help with reading excel files
# also loads QROOT, DATADIR, and targfn

```

## Read the target_recipes tab that defines IRS table spreadsheets to download

```{r}
#| label: get-recipes
#| output: false

df1 <- read_excel(fs::path(DATADIR, targfn), sheet = "irs_downloads")

# tabmeta has information about each Excel file we want to download
tabmeta <- expand_grid(
  year = c(2015, 2021:2022) |>
    as.integer(),
  df1
) |>
  mutate(
    fname = paste0(str_sub(year, 3, 4), fname_base),
    upath = paste0(baseurl, fname)
  )

glimpse(tabmeta)
tabmeta |>
  select(1:3)

```


## Read IRS spreadsheets and save data frame of targets as csv file

```{r}
#| label: read-irs-spreadsheets
#| output: false

# tabs <- c("tab11", "tab12")
# tabs <- c("tab11", "tab12", "tab14")
tabs <- c("tab11", "tab12", "tab14", "tab21")

# get start and end rows for each file of interest
tabrows <- tabs |>
  purrr::map(\(tab) get_rowmap(tab, DATADIR, targfn)) |>
  list_rbind() |>
  pivot_wider(names_from = rowtype, values_from = xlrownum)
tabrows

tabcols <- tabs |>
  purrr::map(\(tab) get_colmap(tab, DATADIR, targfn)) |>
  list_rbind()
tabcols

tabcols_nested <- tabcols |>
  summarise(
    maxcol = max(xl_colnumber),
    column_letters = list(xlcolumn),
    vnames = list(vname),
    .by = c(table, datatype, year)
  )
tabcols_nested

# tabcols_nested |>
#   unnest(cols=column_letters)

# define the tables to get
tabget <- tabmeta |>
  filter(table %in% tabs) |>
  select(table, year, fname, table_description) |>
  left_join(tabrows, by = join_by(table, year)) |>
  left_join(tabcols_nested, by = join_by(table, datatype, year))

# fname <- "15in11si.xls"
# startrow <- 10; endrow <- 29; maxcol <- 7; column_letters <- list(c("A", "B", "D", "G")); colnames <- list(c("x1", "x2", "x3", "x4"))

get_irsdata <- function(
  fname,
  year,
  startrow,
  endrow,
  maxcol,
  column_letters,
  vnames
) {
  # a single file, a single year, a single datatype (filers or taxable)
  # print(fname); print(datatype)
  fpath <- fs::path(DATADIR, year, fname)

  # read relevant rows, but all columns from the first column through the last in columns
  #   we cannot read just the desired columns, due to limitations of read_excel

  df1 <- read_excel(
    fpath,
    sheet = 1,
    range = cellranger::cell_limits(c(startrow, 1), c(endrow, maxcol)),
    col_names = xlnum_to_col(1:maxcol),
    col_types = "text"
  )

  # keep desired columns, substitute the passed-in column names for letters, and pivot
  df2 <- df1 |>
    select(all_of(unlist(column_letters))) |>
    setNames(unlist(vnames)) |>
    mutate(xlrownum = startrow:endrow, incsort = row_number()) |>
    pivot_longer(
      cols = -c(incsort, xlrownum, incrange),
      names_to = "vname",
      values_to = "ptarget"
    ) |>
    mutate(ptarget = as.numeric(ptarget)) |> # every column had better be a number stored as text!
    relocate(incsort, xlrownum)
  df2
}

# TODO: code below expects 2015 AND 2021 files to be in the same folder but they aren't. ----
ptargets_nested <- tabget |>
  # filter(row_number() == 4) |>
  mutate(
    targets = get_irsdata(
      fname,
      year,
      startrow,
      endrow,
      maxcol,
      column_letters,
      vnames
    ) |>
      list(),
    .by = c(fname, datatype)
  )
ptargets_nested
ptargets_nested |> unnest(col = c(targets))
ptargets_nested |>
  filter(table == "tab21", datatype == "taxable") |>
  unnest(col = c(targets))

ptargets <- ptargets_nested |>
  select(table, datatype, year, fname, targets, table_description) |>
  unnest(col = targets) |>
  left_join(
    tabcols |> select(table, datatype, year, xlcolumn, vname),
    by = join_by(table, datatype, year, vname)
  ) |>
  relocate(xlcolumn, xlrownum, .after = fname) |>
  arrange(table, year, vname, incsort)

# check for identical
# sha256sum potential_targets_original.csv potential_targets.csv

```


## Save preliminary target data

```{r}
#| label: save-raw-irs-data
#| output: false

saveRDS(ptargets, fs::path(QROOT, "data", "potential_targets_preliminary.rds"))

ptargets |>
  write_csv(fs::path(QROOT, "data", "potential_targets_preliminary.csv"))

```
